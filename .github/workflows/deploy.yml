# name: Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3

#     - name: Deploy to EC2
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ec2-user
#         key: ${{ secrets.EC2_SSH_KEY }}
#         script: |
#           # Update packages
#           sudo yum update -y

#           # Install Python and Git if not installed
#           sudo yum install -y python3 python3-venv python3-pip git

#           # Navigate to home directory and remove old project directory
#           cd ~
#           sudo rm -rf fastapi-book-project

#           # Clone the latest version of the repository
#           git clone https://github.com/simimwanza/fastapi-book-project.git
#           cd fastapi-book-project

#           # Create and activate a virtual environment
#           python3 -m venv venv
#           source venv/bin/activate

#           # Install dependencies
#           pip install --upgrade pip
#           pip install -r requirements.txt

#           # kill running

#           # Start FastAPI application in the background
#           nohup uvicorn main:app --host 0.0.0.0 --port 8000 > app.log 2>&1 &




name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names fastapi-app || aws ecr create-repository --repository-name fastapi-app
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fastapi-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Check and install Docker if not present
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Check and install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Check and install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

          # Set AWS Region and ECR Registry
          AWS_REGION=${{ secrets.AWS_REGION }}
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"

          # Login to Amazon ECR
          aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

          # Navigate to the app directory, create it if it doesn't exist
          mkdir -p ~/app
          cd ~/app

          # Pull the latest Docker image from ECR
          sudo docker pull $ECR_REGISTRY/fastapi-app:latest

          # Restart and enable Nginx
          sudo systemctl restart nginx
          sudo systemctl enable nginx

          # Stop and remove existing containers
          sudo docker-compose down || true

          # Pull the latest images for Docker Compose services
          sudo docker-compose pull

          # Start services with Docker Compose
          sudo docker-compose up -d --force-recreate --remove-orphans
