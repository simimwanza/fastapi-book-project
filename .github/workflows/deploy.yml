name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names fastapi-app > /dev/null 2>&1 || \
        aws ecr create-repository --repository-name fastapi-app

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: fastapi-app
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Ensure dependencies are installed
          sudo yum install -y docker unzip

          if ! command -v docker &> /dev/null; then
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo mv /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi

          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # AWS Region
          AWS_REGION=${{ secrets.AWS_REGION }}
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"

          # Login to Amazon ECR
          aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY
          
          cd ~/app || mkdir ~/app && cd ~/app

          # Pull and restart container
          sudo docker pull $ECR_REGISTRY/fastapi-app:latest

          # Create docker-compose.yml
          cat <<EOF > docker-compose.yml
          services:
            app:
              image: $ECR_REGISTRY/fastapi-app:latest
              container_name: fastapi-app
              restart: always
              ports:
                - "8000:8000"
              networks:
                - app_network

            nginx:
              image: nginx:latest
              container_name: nginx-proxy
              restart: always
              ports:
                - "80:80"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
              networks:
                - app_network

          networks:
            app_network:
              driver: bridge
          EOF

          # Ensure nginx.conf is available
          if [ ! -f ./nginx.conf ]; then
            echo "Warning: nginx.conf not found. Ensure it's present before restarting Nginx."
          fi

          # Stop any existing process using port 80
          PORT_80_PROCESS=$(sudo lsof -t -i:80)

          if [ -n "$PORT_80_PROCESS" ]; then
            echo "Stopping process using port 80..."
            sudo kill -9 $PORT_80_PROCESS
          fi

          # Stop any existing Nginx service
          if sudo systemctl is-active --quiet nginx; then
            sudo systemctl stop nginx
            sudo systemctl disable nginx
          fi

          # Stop and remove existing Nginx container if it exists
          EXISTING_NGINX=$(sudo docker ps -aq --filter "name=nginx-proxy")

          if [ -n "$EXISTING_NGINX" ]; then
            echo "Stopping and removing existing Nginx container..."
            sudo docker stop nginx-proxy || true
            sudo docker rm nginx-proxy || true
          fi

          # Stop and remove existing FastAPI container if it exists
          EXISTING_APP=$(sudo docker ps -aq --filter "name=fastapi-app")

          if [ -n "$EXISTING_APP" ]; then
            echo "Stopping and removing existing FastAPI container..."
            sudo docker stop fastapi-app || true
            sudo docker rm fastapi-app || true
          fi

          # Validate Nginx configuration and restart
          if sudo nginx -t; then
            sudo systemctl restart nginx
          else
            echo "Nginx configuration test failed. Fix the config before restarting."
            exit 1
          fi

          # Set permissions for docker-compose.yml
          sudo chmod 644 docker-compose.yml

          # Ensure Docker Compose pulls the latest image
          sudo docker-compose pull

          # Force recreate services to prevent conflicts
          sudo docker-compose up -d --force-recreate --remove-orphans || { echo "Docker Compose failed to start services"; exit 1; }
